// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package companyInfoGetter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyInfoGetterClient is the client API for CompanyInfoGetter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyInfoGetterClient interface {
	GetCompanyInfo(ctx context.Context, in *GetCompanyInfoRequest, opts ...grpc.CallOption) (*GetCompanyInfoResponse, error)
}

type companyInfoGetterClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyInfoGetterClient(cc grpc.ClientConnInterface) CompanyInfoGetterClient {
	return &companyInfoGetterClient{cc}
}

func (c *companyInfoGetterClient) GetCompanyInfo(ctx context.Context, in *GetCompanyInfoRequest, opts ...grpc.CallOption) (*GetCompanyInfoResponse, error) {
	out := new(GetCompanyInfoResponse)
	err := c.cc.Invoke(ctx, "/CompanyInfoGetter/GetCompanyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyInfoGetterServer is the server API for CompanyInfoGetter service.
// All implementations must embed UnimplementedCompanyInfoGetterServer
// for forward compatibility
type CompanyInfoGetterServer interface {
	GetCompanyInfo(context.Context, *GetCompanyInfoRequest) (*GetCompanyInfoResponse, error)
	mustEmbedUnimplementedCompanyInfoGetterServer()
}

// UnimplementedCompanyInfoGetterServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyInfoGetterServer struct {
}

func (UnimplementedCompanyInfoGetterServer) GetCompanyInfo(context.Context, *GetCompanyInfoRequest) (*GetCompanyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyInfo not implemented")
}
func (UnimplementedCompanyInfoGetterServer) mustEmbedUnimplementedCompanyInfoGetterServer() {}

// UnsafeCompanyInfoGetterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyInfoGetterServer will
// result in compilation errors.
type UnsafeCompanyInfoGetterServer interface {
	mustEmbedUnimplementedCompanyInfoGetterServer()
}

func RegisterCompanyInfoGetterServer(s grpc.ServiceRegistrar, srv CompanyInfoGetterServer) {
	s.RegisterService(&CompanyInfoGetter_ServiceDesc, srv)
}

func _CompanyInfoGetter_GetCompanyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyInfoGetterServer).GetCompanyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyInfoGetter/GetCompanyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyInfoGetterServer).GetCompanyInfo(ctx, req.(*GetCompanyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyInfoGetter_ServiceDesc is the grpc.ServiceDesc for CompanyInfoGetter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyInfoGetter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CompanyInfoGetter",
	HandlerType: (*CompanyInfoGetterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompanyInfo",
			Handler:    _CompanyInfoGetter_GetCompanyInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/companyInfoGetter/companyInfoGetter.proto",
}
